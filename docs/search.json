[{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Start with Assisted CIDER (asCIDER)","text":"vignette performs asCIDER, meta-clustering method, cross-species pancreas dataset. AsCIDER aimed achieve clustering task data confounded unwanted variables. scenario, unwanted variable species effects. asCIDER short assisted CIDER, assisted prior batch-specific annotations clustering results.","code":""},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Getting Start with Assisted CIDER (asCIDER)","text":"addition CIDER, load following packages:","code":"library(CIDER) library(Seurat) library(pheatmap) library(ggplot2) library(cowplot) library(viridis)"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"pancreas-data","dir":"Articles","previous_headings":"","what":"Pancreas data","title":"Getting Start with Assisted CIDER (asCIDER)","text":"example data can downloaded https://figshare.com/s/d5474749ca8c711cc205. data\\(^1\\) contain cells human (8241 cells) mouse (1886 cells).","code":"load(\"../data/pancreas_counts.RData\") # count matrix load(\"../data/pancreas_meta.RData\") # meta data/cell information seu <- CreateSeuratObject(counts = pancreas_counts, meta.data = pancreas_meta) table(seu$Batch) #>  #> human mouse  #>  8241  1886"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"exam-if-data-are-confounded","dir":"Articles","previous_headings":"","what":"Exam if data are confounded","title":"Getting Start with Assisted CIDER (asCIDER)","text":"Prior use CIDER (integration methods clustering) important exam clustering confounded cross-species factors. first perform conventional Seurat\\(^2\\) clustering pipeline.","code":"seu <- NormalizeData(seu, verbose = FALSE) seu <- FindVariableFeatures(seu, selection.method = \"vst\", nfeatures = 2000, verbose = FALSE) seu <- ScaleData(seu, verbose = FALSE) seu <- RunPCA(seu, npcs = 20, verbose = FALSE) seu <- RunTSNE(seu, reduction = \"pca\", dims = 1:12)"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"confounded-dimension-reduction","dir":"Articles","previous_headings":"Exam if data are confounded","what":"Confounded dimension reduction","title":"Getting Start with Assisted CIDER (asCIDER)","text":"PCA t-SNE plots showed data confounded species. scatterPlot function used generate dimension reduction figures. takes input Seurat object (seu ), name reduction (pca tsne ), variable deciding dot colours (Batch ) title plots. See information ?scatterPlot","code":"p1 <- scatterPlot(seu, \"pca\",colour.by = \"Batch\", title = \"PCA\")  p2 <- scatterPlot(seu, \"tsne\",colour.by = \"Batch\", title = \"t-SNE\")  plot_grid(p1, p2)"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"confounded-clustering-results","dir":"Articles","previous_headings":"Exam if data are confounded","what":"Confounded clustering results","title":"Getting Start with Assisted CIDER (asCIDER)","text":"","code":"seu <- FindNeighbors(seu, dims = 1:12) #> Computing nearest neighbor graph #> Computing SNN seu <- FindClusters(seu) #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 10127 #> Number of edges: 352494 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.9149 #> Number of communities: 22 #> Elapsed time: 1 seconds  scatterPlot(seu, \"tsne\",colour.by = \"seurat_clusters\", title = \"t-SNE\") res <- data.frame(table(seu$seurat_clusters, seu$Batch)) ggplot(res, aes(fill=Var2, y=Freq, x=Var1)) +      geom_bar(position=\"stack\", stat=\"identity\") + xlab(\"CIDER_cluster\") + ylab(\"Proportions\")"},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"prepare-initial-clusters","dir":"Articles","previous_headings":"asCIDER","what":"Prepare initial clusters","title":"Getting Start with Assisted CIDER (asCIDER)","text":"asCIDER uses existing within-batch clustering results. concatenate batch ID within-batch cluster ID obtain cluster-specific groups (.e. initial clusters).","code":"seu$initial_cluster <- paste(seu$Group, seu$Batch, sep = \"_\") table(seu$initial_cluster) #>  #>             acinar_human activated_stellate_human activated_stellate_mouse  #>                      932                      275                       14  #>              alpha_human              alpha_mouse             b_cell_mouse  #>                     2241                      191                       10  #>               beta_human               beta_mouse              delta_human  #>                     2455                      894                      592  #>              delta_mouse             ductal_human             ductal_mouse  #>                      218                     1033                      275  #>        endothelial_human        endothelial_mouse            epsilon_human  #>                      214                      139                       17  #>              gamma_human              gamma_mouse       immune_other_mouse  #>                      241                       41                        8  #>         macrophage_human         macrophage_mouse               mast_human  #>                       39                       36                       25  #> quiescent_stellate_human quiescent_stellate_mouse            schwann_human  #>                      160                       47                       10  #>            schwann_mouse             t_cell_human             t_cell_mouse  #>                        6                        7                        7"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"calculate-of-ider-similarity-matrix","dir":"Articles","previous_headings":"asCIDER","what":"Calculate of IDER similarity matrix","title":"Getting Start with Assisted CIDER (asCIDER)","text":"function getIDEr calculate IDER-based distance matrix. default, use column called “initial_cluster” initial clusters, “Batch” batch. using columns two, please revise two parameters. step, can choose use parallel computation setting use.parallel = TRUE (default use.parallel = FALSE). default number cores used parallel computation detectCores(logical = FALSE) - 1.","code":"ider <- getIDEr(seu,                  group.by.var = \"initial_cluster\",                 batch.by.var = \"Batch\",                 downsampling.size = 35,                  use.parallel = FALSE, verbose = FALSE)"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"visualise-the-similarity-matrix","dir":"Articles","previous_headings":"asCIDER","what":"Visualise the similarity matrix","title":"Getting Start with Assisted CIDER (asCIDER)","text":"","code":"groups <- c(\"alpha\",\"beta\",\"delta\", \"gamma\",\"ductal\",\"endothelial\", \"activated_stellate\", \"quiescent_stellate\", \"macrophage\") idx1 <- paste0(groups, \"_human\") idx2 <- paste0(groups, \"_mouse\")  pheatmap::pheatmap(   ider[[1]][idx1, idx2],   color = inferno(10),   border_color = NA,   display_numbers = TRUE,   cluster_rows = FALSE,   cluster_cols = FALSE,   width = 7,   height = 5,   cellwidth = 22,   cellheight = 22 )"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"perform-final-clustering","dir":"Articles","previous_headings":"asCIDER","what":"Perform final Clustering","title":"Getting Start with Assisted CIDER (asCIDER)","text":"Next put Seurat object similarity matrix list finalClustering. can either cut trees height (set cutree.= 'h) k (set cutree.= 'k). default cutting height 0.45. final clustering results stored Colume cider_final_cluster Seurat object metadata can extracted using seu$cider_final_cluster.","code":"seu <- finalClustering(seu, ider, cutree.h = 0.45) head(seu@meta.data) #>                             orig.ident nCount_RNA nFeature_RNA Batch   Group #> mouse1_lib1.final_cell_0001     mouse1      11003         2994 mouse    beta #> mouse1_lib1.final_cell_0002     mouse1      10701         3565 mouse  ductal #> mouse1_lib1.final_cell_0003     mouse1       9445         2401 mouse   delta #> mouse1_lib1.final_cell_0004     mouse1       8193         2865 mouse schwann #> mouse1_lib1.final_cell_0005     mouse1       7323         2355 mouse   delta #> mouse1_lib1.final_cell_0006     mouse1       8504         2637 mouse    beta #>                             Sample RNA_snn_res.0.8 seurat_clusters #> mouse1_lib1.final_cell_0001 mouse1               9               9 #> mouse1_lib1.final_cell_0002 mouse1              13              13 #> mouse1_lib1.final_cell_0003 mouse1               7               7 #> mouse1_lib1.final_cell_0004 mouse1              21              21 #> mouse1_lib1.final_cell_0005 mouse1               7               7 #> mouse1_lib1.final_cell_0006 mouse1               8               8 #>                             initial_cluster CIDER_cluster #> mouse1_lib1.final_cell_0001      beta_mouse             1 #> mouse1_lib1.final_cell_0002    ductal_mouse             2 #> mouse1_lib1.final_cell_0003     delta_mouse             3 #> mouse1_lib1.final_cell_0004   schwann_mouse             4 #> mouse1_lib1.final_cell_0005     delta_mouse             3 #> mouse1_lib1.final_cell_0006      beta_mouse             1"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"visualise-clustering-results","dir":"Articles","previous_headings":"","what":"Visualise clustering results","title":"Getting Start with Assisted CIDER (asCIDER)","text":"","code":"plot_list <- list() plot_list[[1]] <- scatterPlot(seu, \"tsne\", colour.by = \"CIDER_cluster\", title = \"asCIDER clustering results\")  plot_list[[2]] <- scatterPlot(seu, \"tsne\", colour.by = \"Group\", title = \"Ground truth of cell populations\")  plot_grid(plotlist = plot_list, ncol = 2) res <- data.frame(table(seu$CIDER_cluster, seu$Batch)) ggplot(res, aes(fill=Var2, y=Freq, x=Var1)) +      geom_bar(position=\"stack\", stat=\"identity\") + xlab(\"CIDER_cluster\") + ylab(\"Proportions\")"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"technical","dir":"Articles","previous_headings":"","what":"Technical","title":"Getting Start with Assisted CIDER (asCIDER)","text":"","code":"sessionInfo() #> R version 4.1.2 (2021-11-01) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS Big Sur 10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] viridis_0.6.2      viridisLite_0.4.0  cowplot_1.1.1      ggplot2_3.4.2      #> [5] pheatmap_1.0.12    SeuratObject_4.0.4 Seurat_4.1.0       CIDER_0.99.1       #>  #> loaded via a namespace (and not attached): #>   [1] systemfonts_1.0.2     plyr_1.8.6            igraph_1.2.8          #>   [4] lazyeval_0.2.2        splines_4.1.2         listenv_0.8.0         #>   [7] scattermore_0.7       digest_0.6.28         foreach_1.5.1         #>  [10] htmltools_0.5.2       fansi_0.5.0           magrittr_2.0.1        #>  [13] memoise_2.0.0         tensor_1.5            cluster_2.1.2         #>  [16] doParallel_1.0.16     ROCR_1.0-11           limma_3.50.0          #>  [19] globals_0.16.1        matrixStats_0.61.0    pkgdown_2.0.7         #>  [22] spatstat.sparse_2.0-0 colorspace_2.0-2      ggrepel_0.9.3         #>  [25] textshaping_0.3.6     xfun_0.28             dplyr_1.1.2           #>  [28] crayon_1.5.2          jsonlite_1.7.2        spatstat.data_2.1-0   #>  [31] survival_3.2-13       zoo_1.8-9             iterators_1.0.13      #>  [34] glue_1.6.2            polyclip_1.10-0       gtable_0.3.0          #>  [37] leiden_0.3.9          kernlab_0.9-29        future.apply_1.8.1    #>  [40] abind_1.4-5           scales_1.2.1          DBI_1.1.1             #>  [43] edgeR_3.36.0          miniUI_0.1.1.1        Rcpp_1.0.7            #>  [46] xtable_1.8-4          reticulate_1.22       spatstat.core_2.3-1   #>  [49] htmlwidgets_1.5.4     httr_1.4.2            RColorBrewer_1.1-2    #>  [52] ellipsis_0.3.2        ica_1.0-2             farver_2.1.0          #>  [55] pkgconfig_2.0.3       sass_0.4.0            uwot_0.1.10           #>  [58] deldir_1.0-6          locfit_1.5-9.4        utf8_1.2.2            #>  [61] tidyselect_1.2.0      labeling_0.4.2        rlang_1.1.1           #>  [64] reshape2_1.4.4        later_1.3.0           munsell_0.5.0         #>  [67] tools_4.1.2           cachem_1.0.6          cli_3.4.1             #>  [70] dbscan_1.1-8          generics_0.1.1        ggridges_0.5.3        #>  [73] evaluate_0.14         stringr_1.5.0         fastmap_1.1.0         #>  [76] yaml_2.2.1            ragg_1.1.3            goftest_1.2-3         #>  [79] knitr_1.36            fs_1.5.0              fitdistrplus_1.1-6    #>  [82] purrr_1.0.1           RANN_2.6.1            pbapply_1.5-0         #>  [85] future_1.28.0         nlme_3.1-153          mime_0.12             #>  [88] compiler_4.1.2        rstudioapi_0.13       plotly_4.10.0         #>  [91] png_0.1-7             spatstat.utils_2.2-0  tibble_3.2.1          #>  [94] bslib_0.3.1           stringi_1.7.5         highr_0.9             #>  [97] desc_1.4.0            lattice_0.20-45       Matrix_1.3-4          #> [100] vctrs_0.6.2           pillar_1.9.0          lifecycle_1.0.3       #> [103] spatstat.geom_2.4-0   lmtest_0.9-39         jquerylib_0.1.4       #> [106] RcppAnnoy_0.0.19      data.table_1.14.2     irlba_2.3.3           #> [109] httpuv_1.6.3          patchwork_1.1.1       R6_2.5.1              #> [112] promises_1.2.0.1      KernSmooth_2.23-20    gridExtra_2.3         #> [115] parallelly_1.32.1     codetools_0.2-18      MASS_7.3-54           #> [118] rprojroot_2.0.2       withr_2.5.0           sctransform_0.3.3     #> [121] mgcv_1.8-38           parallel_4.1.2        grid_4.1.2            #> [124] rpart_4.1-15          tidyr_1.3.0           rmarkdown_2.11        #> [127] Rtsne_0.15            shiny_1.7.1"},{"path":"https://zhiyhu.github.io/CIDER/articles/asCIDER.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting Start with Assisted CIDER (asCIDER)","text":"Baron, M. et al. Single-Cell Transcriptomic Map Human Mouse Pancreas Reveals Inter- Intra-cell Population Structure. Cell Syst 3, 346–360.e4 (2016). Satija R, et al. Spatial reconstruction single-cell gene expression data. Nature Biotechnology 33, 495-502 (2015).","code":""},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"vignette performs dnCIDER cross-species pancreas dataset. aimed show underneath structure dnCIDER compared high level vignette.","code":""},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"addition CIDER, load following packages:","code":"library(CIDER) library(Seurat) #> Attaching SeuratObject library(parallel) library(cowplot)"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER.html","id":"load-example-data","dir":"Articles","previous_headings":"","what":"Load example data","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"example data can downloaded https://figshare.com/s/d5474749ca8c711cc205. Pancreatic cell data\\(^1\\) contain cells human (8241 cells) mouse (1886 cells).","code":"load(\"../data/pancreas_counts.RData\") # count matrix load(\"../data/pancreas_meta.RData\") # meta data/cell information seu <- CreateSeuratObject(counts = pancreas_counts, meta.data = pancreas_meta) table(seu$Batch) #>  #> human mouse  #>  8241  1886"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER.html","id":"perform-initial-clustering","dir":"Articles","previous_headings":"","what":"Perform initial clustering","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"","code":"seu_list <- Seurat::SplitObject(seu, split.by = \"Batch\") seu_list <- mclapply(seu_list, function(x) {   x <- NormalizeData(x, normalization.method = \"LogNormalize\",                       scale.factor = 10000, verbose = FALSE)   x <- FindVariableFeatures(x, selection.method = \"vst\",                              nfeatures = 2000, verbose = FALSE)   x <- ScaleData(x, verbose = FALSE, vars.to.regress = \"Sample\")   x <- RunPCA(x, features = VariableFeatures(object = x), verbose = FALSE)     x <- FindNeighbors(x, dims = 1:15, verbose = FALSE)   x <- FindClusters(x, resolution = 0.6, verbose = FALSE)   return(x) }) knitr::kable(table(seu_list[[2]]$Group, seu_list[[2]]$seurat_clusters)) seu_list <- mclapply(seu_list, RunTSNE, dims = 1:15) p1 <- scatterPlot(seu_list[[1]], \"tsne\", colour.by = \"seurat_clusters\") p2 <- scatterPlot(seu_list[[2]], \"tsne\", colour.by = \"seurat_clusters\") cowplot::plot_grid(p1,p2) dist_coef <- getDistMat(seu_list, downsampling.size = 50) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% par(mfrow = c(length(seu_list),1)) for(i in which(sapply(dist_coef, function(x) return(!is.null(x))))){   tmp <- dist_coef[[i]] + t(dist_coef[[i]])   diag(tmp) <- 1   pheatmap::pheatmap(tmp, display_numbers = TRUE) } for(seu_itor in 1:2){   tmp <- dist_coef[[seu_itor]] + t(dist_coef[[seu_itor]])   diag(tmp) <- 1   tmp <- 1 - tmp   hc <- hclust(as.dist(tmp), method = \"average\")   hres <- cutree(hc, h = 0.4)   df_hres <- data.frame(hres)   df_hres$hres <- paste0(df_hres$hres, \"_\", unique(seu_list[[seu_itor]]$Batch))   seu_list[[seu_itor]]$inicluster_tmp <- paste0(seu_list[[seu_itor]]$seurat_clusters, \"_\", seu_list[[seu_itor]]$Batch)   seu_list[[seu_itor]]$inicluster <- df_hres$hres[match(seu_list[[seu_itor]]$inicluster_tmp,rownames(df_hres))] } # plot(as.dendrogram(hc), horiz = T) p1 <- scatterPlot(seu_list[[1]], \"tsne\", \"inicluster\") p2 <- scatterPlot(seu_list[[2]], \"tsne\", \"inicluster\") plot_grid(p1,p2) scatterPlot(seu_list[[2]], \"tsne\", \"Group\")"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER.html","id":"calculate-of-ider-similarity-matrix","dir":"Articles","previous_headings":"","what":"Calculate of IDER similarity matrix","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"","code":"res <- unlist(lapply(seu_list, function(x) return(x$inicluster))) res_names <- unlist(lapply(seu_list, function(x) return(colnames(x)))) seu$initial_cluster <- res[match(colnames(seu), res_names)]  ider <- getIDEr(seu,                  group.by.var = \"initial_cluster\",                 batch.by.var = \"Batch\",                 downsampling.size = 35,                  use.parallel = FALSE, verbose = FALSE) net <- plotNetwork(seu, ider, colour.by = \"Group\" , vertex.size = 0.6, weight.factor = 5) hc <- hclust(as.dist(1-(ider[[1]] + t(ider[[1]])))/2) plot(as.dendrogram(hc), horiz = TRUE)"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER.html","id":"perform-final-clustering","dir":"Articles","previous_headings":"","what":"Perform final Clustering","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"","code":"seu <- finalClustering(seu, ider, cutree.h = 0.35) # final clustering seu <- NormalizeData(seu, verbose = FALSE) seu <- FindVariableFeatures(seu, selection.method = \"vst\",                              nfeatures = 2000, verbose = FALSE) seu <- ScaleData(seu, verbose = FALSE) seu <- RunPCA(seu, npcs = 20, verbose = FALSE) seu <- RunTSNE(seu, reduction = \"pca\", dims = 1:12) plot_list <- list() plot_list[[1]] <- scatterPlot(seu, \"tsne\", colour.by = \"CIDER_cluster\", title = \"asCIDER clustering results\")  plot_list[[2]] <- scatterPlot(seu, \"tsne\", colour.by = \"Group\", title = \"Ground truth of cell populations\")  plot_grid(plotlist = plot_list, ncol = 2)"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER.html","id":"technical","dir":"Articles","previous_headings":"","what":"Technical","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"","code":"sessionInfo() #> R version 4.1.2 (2021-11-01) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS Big Sur 10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> attached base packages: #> [1] parallel  stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] cowplot_1.1.1      SeuratObject_4.0.4 Seurat_4.1.0       CIDER_0.99.1       #>  #> loaded via a namespace (and not attached): #>   [1] systemfonts_1.0.2     plyr_1.8.6            igraph_1.2.8          #>   [4] lazyeval_0.2.2        splines_4.1.2         listenv_0.8.0         #>   [7] scattermore_0.7       ggplot2_3.4.2         digest_0.6.28         #>  [10] foreach_1.5.1         htmltools_0.5.2       viridis_0.6.2         #>  [13] fansi_0.5.0           magrittr_2.0.1        memoise_2.0.0         #>  [16] tensor_1.5            cluster_2.1.2         doParallel_1.0.16     #>  [19] ROCR_1.0-11           limma_3.50.0          globals_0.16.1        #>  [22] matrixStats_0.61.0    pkgdown_2.0.7         spatstat.sparse_2.0-0 #>  [25] colorspace_2.0-2      ggrepel_0.9.3         textshaping_0.3.6     #>  [28] xfun_0.28             dplyr_1.1.2           crayon_1.5.2          #>  [31] jsonlite_1.7.2        spatstat.data_2.1-0   survival_3.2-13       #>  [34] zoo_1.8-9             iterators_1.0.13      glue_1.6.2            #>  [37] polyclip_1.10-0       gtable_0.3.0          leiden_0.3.9          #>  [40] kernlab_0.9-29        future.apply_1.8.1    abind_1.4-5           #>  [43] scales_1.2.1          pheatmap_1.0.12       DBI_1.1.1             #>  [46] edgeR_3.36.0          miniUI_0.1.1.1        Rcpp_1.0.7            #>  [49] viridisLite_0.4.0     xtable_1.8-4          reticulate_1.22       #>  [52] spatstat.core_2.3-1   htmlwidgets_1.5.4     httr_1.4.2            #>  [55] RColorBrewer_1.1-2    ellipsis_0.3.2        ica_1.0-2             #>  [58] farver_2.1.0          pkgconfig_2.0.3       sass_0.4.0            #>  [61] uwot_0.1.10           deldir_1.0-6          locfit_1.5-9.4        #>  [64] utf8_1.2.2            labeling_0.4.2        tidyselect_1.2.0      #>  [67] rlang_1.1.1           reshape2_1.4.4        later_1.3.0           #>  [70] munsell_0.5.0         tools_4.1.2           cachem_1.0.6          #>  [73] cli_3.4.1             dbscan_1.1-8          generics_0.1.1        #>  [76] ggridges_0.5.3        evaluate_0.14         stringr_1.5.0         #>  [79] fastmap_1.1.0         yaml_2.2.1            ragg_1.1.3            #>  [82] goftest_1.2-3         knitr_1.36            fs_1.5.0              #>  [85] fitdistrplus_1.1-6    purrr_1.0.1           RANN_2.6.1            #>  [88] pbapply_1.5-0         future_1.28.0         nlme_3.1-153          #>  [91] mime_0.12             compiler_4.1.2        rstudioapi_0.13       #>  [94] plotly_4.10.0         png_0.1-7             spatstat.utils_2.2-0  #>  [97] tibble_3.2.1          bslib_0.3.1           stringi_1.7.5         #> [100] highr_0.9             desc_1.4.0            lattice_0.20-45       #> [103] Matrix_1.3-4          vctrs_0.6.2           pillar_1.9.0          #> [106] lifecycle_1.0.3       spatstat.geom_2.4-0   lmtest_0.9-39         #> [109] jquerylib_0.1.4       RcppAnnoy_0.0.19      data.table_1.14.2     #> [112] irlba_2.3.3           httpuv_1.6.3          patchwork_1.1.1       #> [115] R6_2.5.1              promises_1.2.0.1      KernSmooth_2.23-20    #> [118] gridExtra_2.3         parallelly_1.32.1     codetools_0.2-18      #> [121] MASS_7.3-54           rprojroot_2.0.2       withr_2.5.0           #> [124] sctransform_0.3.3     mgcv_1.8-38           grid_4.1.2            #> [127] rpart_4.1-15          tidyr_1.3.0           rmarkdown_2.11        #> [130] Rtsne_0.15            shiny_1.7.1"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"Baron, M. et al. Single-Cell Transcriptomic Map Human Mouse Pancreas Reveals Inter- Intra-cell Population Structure. Cell Syst 3, 346–360.e4 (2016). Satija R, et al. Spatial reconstruction single-cell gene expression data. Nature Biotechnology 33, 495-502 (2015).","code":""},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Start with De Novo CIDER (dnCIDER)","text":"vignette performs dnCIDER cross-species pancreas dataset.","code":""},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Getting Start with De Novo CIDER (dnCIDER)","text":"addition CIDER, load following packages:","code":"library(CIDER) library(Seurat) #> Attaching SeuratObject library(parallel) library(cowplot)"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"load-pancreas-data","dir":"Articles","previous_headings":"","what":"Load pancreas data","title":"Getting Start with De Novo CIDER (dnCIDER)","text":"example data can downloaded https://figshare.com/s/d5474749ca8c711cc205. Pancreatic cell data\\(^1\\) contain cells human (8241 cells) mouse (1886 cells).","code":"load(\"../data/pancreas_counts.RData\") # count matrix load(\"../data/pancreas_meta.RData\") # meta data/cell information seu <- CreateSeuratObject(counts = pancreas_counts, meta.data = pancreas_meta) table(seu$Batch) #>  #> human mouse  #>  8241  1886"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"perform-dncider-high-level","dir":"Articles","previous_headings":"","what":"Perform dnCIDER (high-level)","title":"Getting Start with De Novo CIDER (dnCIDER)","text":"DnCIDER contains three steps","code":"seu <- initialClustering(seu, additional.vars.to.regress = \"Sample\", dims = 1:15) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% ider <- getIDEr(seu, downsampling.size = 35, use.parallel = FALSE, verbose = FALSE) seu <- finalClustering(seu, ider, cutree.h = 0.35) # final clustering"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"visualise-clustering-results","dir":"Articles","previous_headings":"","what":"Visualise clustering results","title":"Getting Start with De Novo CIDER (dnCIDER)","text":"use Seurat pipeline perform normalisation (NormalizeData), preprocessing (FindVariableFeatures ScaleData) dimension reduction (RunPCA RunTSNE). can see  comparing dnCIDER results cell annotation publication\\(^1\\), observe dnCIDER correctly identify majority populations across two species.","code":"seu <- NormalizeData(seu, verbose = FALSE) seu <- FindVariableFeatures(seu, selection.method = \"vst\", nfeatures = 2000, verbose = FALSE) seu <- ScaleData(seu, verbose = FALSE) seu <- RunPCA(seu, npcs = 20, verbose = FALSE) seu <- RunTSNE(seu, reduction = \"pca\", dims = 1:12) scatterPlot(seu, \"tsne\", colour.by = \"CIDER_cluster\", title = \"asCIDER clustering results\") scatterPlot(seu, \"tsne\", colour.by = \"Group\", title = \"Ground truth of cell populations\")"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"technical","dir":"Articles","previous_headings":"","what":"Technical","title":"Getting Start with De Novo CIDER (dnCIDER)","text":"","code":"sessionInfo() #> R version 4.1.2 (2021-11-01) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS Big Sur 10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> attached base packages: #> [1] parallel  stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] cowplot_1.1.1      SeuratObject_4.0.4 Seurat_4.1.0       CIDER_0.99.1       #>  #> loaded via a namespace (and not attached): #>   [1] systemfonts_1.0.2     plyr_1.8.6            igraph_1.2.8          #>   [4] lazyeval_0.2.2        splines_4.1.2         listenv_0.8.0         #>   [7] scattermore_0.7       ggplot2_3.4.2         digest_0.6.28         #>  [10] foreach_1.5.1         htmltools_0.5.2       viridis_0.6.2         #>  [13] fansi_0.5.0           magrittr_2.0.1        memoise_2.0.0         #>  [16] tensor_1.5            cluster_2.1.2         doParallel_1.0.16     #>  [19] ROCR_1.0-11           limma_3.50.0          globals_0.16.1        #>  [22] matrixStats_0.61.0    pkgdown_2.0.7         spatstat.sparse_2.0-0 #>  [25] colorspace_2.0-2      ggrepel_0.9.3         textshaping_0.3.6     #>  [28] xfun_0.28             dplyr_1.1.2           crayon_1.5.2          #>  [31] jsonlite_1.7.2        spatstat.data_2.1-0   survival_3.2-13       #>  [34] zoo_1.8-9             iterators_1.0.13      glue_1.6.2            #>  [37] polyclip_1.10-0       gtable_0.3.0          leiden_0.3.9          #>  [40] kernlab_0.9-29        future.apply_1.8.1    abind_1.4-5           #>  [43] scales_1.2.1          pheatmap_1.0.12       DBI_1.1.1             #>  [46] edgeR_3.36.0          miniUI_0.1.1.1        Rcpp_1.0.7            #>  [49] viridisLite_0.4.0     xtable_1.8-4          reticulate_1.22       #>  [52] spatstat.core_2.3-1   htmlwidgets_1.5.4     httr_1.4.2            #>  [55] RColorBrewer_1.1-2    ellipsis_0.3.2        ica_1.0-2             #>  [58] farver_2.1.0          pkgconfig_2.0.3       sass_0.4.0            #>  [61] uwot_0.1.10           deldir_1.0-6          locfit_1.5-9.4        #>  [64] utf8_1.2.2            tidyselect_1.2.0      labeling_0.4.2        #>  [67] rlang_1.1.1           reshape2_1.4.4        later_1.3.0           #>  [70] munsell_0.5.0         tools_4.1.2           cachem_1.0.6          #>  [73] cli_3.4.1             dbscan_1.1-8          generics_0.1.1        #>  [76] ggridges_0.5.3        evaluate_0.14         stringr_1.5.0         #>  [79] fastmap_1.1.0         yaml_2.2.1            ragg_1.1.3            #>  [82] goftest_1.2-3         knitr_1.36            fs_1.5.0              #>  [85] fitdistrplus_1.1-6    purrr_1.0.1           RANN_2.6.1            #>  [88] pbapply_1.5-0         future_1.28.0         nlme_3.1-153          #>  [91] mime_0.12             compiler_4.1.2        rstudioapi_0.13       #>  [94] plotly_4.10.0         png_0.1-7             spatstat.utils_2.2-0  #>  [97] tibble_3.2.1          bslib_0.3.1           stringi_1.7.5         #> [100] highr_0.9             desc_1.4.0            lattice_0.20-45       #> [103] Matrix_1.3-4          vctrs_0.6.2           pillar_1.9.0          #> [106] lifecycle_1.0.3       spatstat.geom_2.4-0   lmtest_0.9-39         #> [109] jquerylib_0.1.4       RcppAnnoy_0.0.19      data.table_1.14.2     #> [112] irlba_2.3.3           httpuv_1.6.3          patchwork_1.1.1       #> [115] R6_2.5.1              promises_1.2.0.1      KernSmooth_2.23-20    #> [118] gridExtra_2.3         parallelly_1.32.1     codetools_0.2-18      #> [121] MASS_7.3-54           rprojroot_2.0.2       withr_2.5.0           #> [124] sctransform_0.3.3     mgcv_1.8-38           grid_4.1.2            #> [127] rpart_4.1-15          tidyr_1.3.0           rmarkdown_2.11        #> [130] Rtsne_0.15            shiny_1.7.1"},{"path":"https://zhiyhu.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting Start with De Novo CIDER (dnCIDER)","text":"Baron, M. et al. Single-Cell Transcriptomic Map Human Mouse Pancreas Reveals Inter- Intra-cell Population Structure. Cell Syst 3, 346–360.e4 (2016). Satija R, et al. Spatial reconstruction single-cell gene expression data. Nature Biotechnology 33, 495-502 (2015).","code":""},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Evaluating integration results by CIDER","text":"Integration batch correction methods become popular component bioinformatic workflows scRNA-Seq data analysis, whilst integration results (mostly corrected PCs less commonly corrected read counts) rarely validated evaluated objective metric. assess correctness integration (.e. whether cells belonging population gathered ones belonging different populations stay separate integration), existing evaluation metrics require existence ground truth cell population annotations. CIDER provides ground-truth-free approach evaluate integration results. vignette focuses showing process using example data dendritic cells.","code":""},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Evaluating integration results by CIDER","text":"Apart CIDER, following packages also need loaded:","code":"library(CIDER) library(Seurat) library(cowplot) library(ggplot2)"},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"load-dendritic-data","dir":"Articles","previous_headings":"","what":"Load dendritic data","title":"Evaluating integration results by CIDER","text":"example data can downloaded https://figshare.com/s/d5474749ca8c711cc205. dataset contains 26593 genes 564 cells two batches.","code":"load(\"../data/dendritic.rda\") dim(dendritic) #> [1] 26593   564 table(dendritic$Batch) #>  #> Batch1 Batch2  #>    281    283"},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"perform-integration","dir":"Articles","previous_headings":"","what":"Perform integration","title":"Evaluating integration results by CIDER","text":"First integration method\\(^1\\) applied dendritic data. can apply integration methods data, long correct PCs stored Seurat object, .e. Reductions(seu.integrated, \"pca\") seu.integrated@reductions$pca. Clear intermediate outcome.","code":"seu.list <- SplitObject(dendritic, split.by = \"Batch\") for (i in 1:length(seu.list)) {   seu.list[[i]] <- NormalizeData(seu.list[[i]], verbose = FALSE)   seu.list[[i]] <- FindVariableFeatures(seu.list[[i]],                                          selection.method = \"vst\",                                          nfeatures = 1000, verbose = FALSE) } seu.anchors <- FindIntegrationAnchors(object.list = seu.list,                                        dims = 1:15, verbose = FALSE) seu.integrated <- IntegrateData(anchorset = seu.anchors,                                  dims = 1:15, verbose = FALSE)  DefaultAssay(seu.integrated) <- \"integrated\" seu.integrated <- ScaleData(seu.integrated, verbose = FALSE) seu.integrated <- RunPCA(seu.integrated, verbose = FALSE) seu.integrated <- RunTSNE(seu.integrated, reduction = \"pca\", dims = 1:5) seu.integrated@reductions$pca #> A dimensional reduction object with key PC_  #>  Number of dimensions: 50  #>  Projected dimensional reduction calculated:  FALSE  #>  Jackstraw run: FALSE  #>  Computed using assay: integrated rm(seu.list, seu.anchors) gc() #>            used  (Mb) gc trigger  (Mb) limit (Mb) max used  (Mb) #> Ncells  3206534 171.3    4833610 258.2         NA  4833610 258.2 #> Vcells 24637736 188.0   69039494 526.8      32768 69039431 526.8"},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"calculate-similarity-and-p-values-essential","dir":"Articles","previous_headings":"Evaluate by CIDER","what":"Calculate similarity and p values (essential)","title":"Evaluating integration results by CIDER","text":"CIDER evaluates integration results three steps: Clustering based corrected PCs (hdbscan.seurat). step uses HDBSCAN, density-based clustering algorithm\\(^2\\). clustering results stored seu.integrated$dbscan_cluster. Clusters divided batch-specific clusters concatenating dbscan_cluster batch, stored seu.integrated$initial_cluster. Compute IDER-based similarity matrix (getIDEr) among batch-specific initial clusters. multiple CPUs availble, can set use.parallel = TRUE n.cores number available cores speed . Assign similarity estimate empirical p values (estimateProb) correctness integration. High similarity values low p values indicate cell similar surrounding cells likely integrated correctly.","code":"seu.integrated <- hdbscan.seurat(seu.integrated) ider <- getIDEr(seu.integrated, use.parallel = FALSE, verbose = FALSE) seu.integrated <- estimateProb(seu.integrated, ider)"},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"evaluation-scores","dir":"Articles","previous_headings":"Evaluate by CIDER","what":"Evaluation scores","title":"Evaluating integration results by CIDER","text":"evaluation scores can viewed scatterPlot . shown cells dbscan_cluster 2 3 low regional similarity high empirical p values, suggesting can incorrectly integrated.","code":"p1 <- scatterPlot(seu.integrated, \"tsne\", \"dbscan_cluster\") p2 <- scatterPlot(seu.integrated, \"tsne\", colour.by = \"similarity\") + labs(fill = \"Similarity\") p3 <- scatterPlot(seu.integrated, \"tsne\", colour.by = \"pvalue\") + labs(fill = \"Prob of \\nrejection\") plot_grid(p1,p2,p3, ncol = 3)"},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"the-ider-based-similarity-matrix","dir":"Articles","previous_headings":"Evaluate by CIDER","what":"The IDER-based similarity matrix","title":"Evaluating integration results by CIDER","text":"insight, can view IDER-based similarity matrix functions plotNetwork plotHeatmap. require input Seurat object output getIDEr. example, 1_Batch1 1_Batch2 well 4_Batch1 4_Batch2 high similarity. plotNetwork generates graph vertexes initial clusters edge widths similarity values. parameter weight.factor controls scale edge widths; larger weight.factor give bolder edges proportionally.  plotHeatmap generates heatmap cell coloured labeled similarity values.","code":"plotNetwork(seu.integrated, ider, weight.factor = 3) #> IGRAPH 6a879f8 UNW- 10 11 --  #> + attr: name (v/c), frame.color (v/c), size (v/n), label.family (v/c), #> | weight (e/n), width (e/n) #> + edges from 6a879f8 (vertex names): #>  [1] 4_Batch1--4_Batch2 4_Batch1--2_Batch2 2_Batch1--4_Batch2 2_Batch1--2_Batch2 #>  [5] 2_Batch1--3_Batch2 0_Batch1--0_Batch2 0_Batch1--1_Batch2 1_Batch1--1_Batch2 #>  [9] 1_Batch1--3_Batch2 3_Batch1--2_Batch2 3_Batch1--3_Batch2 plotHeatmap(seu.integrated, ider)"},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"refering-to-ground-truth-annotation","dir":"Articles","previous_headings":"","what":"Refering to ground-truth annotation","title":"Evaluating integration results by CIDER","text":"far evaluation completed CIDER used ground truth ! Let’s peep ground truth closure vignette. shown figure , clusters low IDER-based similarity high p values actually least two popuplations (CD1C CD141), verifying CIDER spots wrongly integrated cells.","code":"scatterPlot(seu.integrated, \"tsne\", colour.by = \"Group\") + labs(fill = \"Group\\n (ground truth)\")"},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"technical","dir":"Articles","previous_headings":"","what":"Technical","title":"Evaluating integration results by CIDER","text":"","code":"sessionInfo() #> R version 4.1.2 (2021-11-01) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS Big Sur 10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.2      cowplot_1.1.1      SeuratObject_4.0.4 Seurat_4.1.0       #> [5] CIDER_0.99.1       #>  #> loaded via a namespace (and not attached): #>   [1] systemfonts_1.0.2     plyr_1.8.6            igraph_1.2.8          #>   [4] lazyeval_0.2.2        splines_4.1.2         listenv_0.8.0         #>   [7] scattermore_0.7       digest_0.6.28         foreach_1.5.1         #>  [10] htmltools_0.5.2       viridis_0.6.2         fansi_0.5.0           #>  [13] magrittr_2.0.1        memoise_2.0.0         tensor_1.5            #>  [16] cluster_2.1.2         doParallel_1.0.16     ROCR_1.0-11           #>  [19] limma_3.50.0          globals_0.16.1        matrixStats_0.61.0    #>  [22] pkgdown_2.0.7         spatstat.sparse_2.0-0 colorspace_2.0-2      #>  [25] ggrepel_0.9.3         textshaping_0.3.6     xfun_0.28             #>  [28] dplyr_1.1.2           crayon_1.5.2          jsonlite_1.7.2        #>  [31] spatstat.data_2.1-0   survival_3.2-13       zoo_1.8-9             #>  [34] iterators_1.0.13      glue_1.6.2            polyclip_1.10-0       #>  [37] gtable_0.3.0          leiden_0.3.9          kernlab_0.9-29        #>  [40] future.apply_1.8.1    abind_1.4-5           scales_1.2.1          #>  [43] pheatmap_1.0.12       DBI_1.1.1             edgeR_3.36.0          #>  [46] miniUI_0.1.1.1        Rcpp_1.0.7            viridisLite_0.4.0     #>  [49] xtable_1.8-4          reticulate_1.22       spatstat.core_2.3-1   #>  [52] htmlwidgets_1.5.4     httr_1.4.2            RColorBrewer_1.1-2    #>  [55] ellipsis_0.3.2        ica_1.0-2             pkgconfig_2.0.3       #>  [58] farver_2.1.0          sass_0.4.0            uwot_0.1.10           #>  [61] deldir_1.0-6          locfit_1.5-9.4        utf8_1.2.2            #>  [64] labeling_0.4.2        tidyselect_1.2.0      rlang_1.1.1           #>  [67] reshape2_1.4.4        later_1.3.0           munsell_0.5.0         #>  [70] tools_4.1.2           cachem_1.0.6          cli_3.4.1             #>  [73] dbscan_1.1-8          generics_0.1.1        ggridges_0.5.3        #>  [76] evaluate_0.14         stringr_1.5.0         fastmap_1.1.0         #>  [79] yaml_2.2.1            ragg_1.1.3            goftest_1.2-3         #>  [82] knitr_1.36            fs_1.5.0              fitdistrplus_1.1-6    #>  [85] purrr_1.0.1           RANN_2.6.1            pbapply_1.5-0         #>  [88] future_1.28.0         nlme_3.1-153          mime_0.12             #>  [91] compiler_4.1.2        rstudioapi_0.13       plotly_4.10.0         #>  [94] png_0.1-7             spatstat.utils_2.2-0  tibble_3.2.1          #>  [97] bslib_0.3.1           stringi_1.7.5         highr_0.9             #> [100] desc_1.4.0            lattice_0.20-45       Matrix_1.3-4          #> [103] vctrs_0.6.2           pillar_1.9.0          lifecycle_1.0.3       #> [106] spatstat.geom_2.4-0   lmtest_0.9-39         jquerylib_0.1.4       #> [109] RcppAnnoy_0.0.19      data.table_1.14.2     irlba_2.3.3           #> [112] httpuv_1.6.3          patchwork_1.1.1       R6_2.5.1              #> [115] promises_1.2.0.1      KernSmooth_2.23-20    gridExtra_2.3         #> [118] parallelly_1.32.1     codetools_0.2-18      MASS_7.3-54           #> [121] rprojroot_2.0.2       withr_2.5.0           sctransform_0.3.3     #> [124] mgcv_1.8-38           parallel_4.1.2        grid_4.1.2            #> [127] rpart_4.1-15          tidyr_1.3.0           rmarkdown_2.11        #> [130] Rtsne_0.15            shiny_1.7.1"},{"path":"https://zhiyhu.github.io/CIDER/articles/evaluation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Evaluating integration results by CIDER","text":"Stuart Butler et al. Comprehensive Integration Single-Cell Data. Cell (2019). Campello, Ricardo JGB, Davoud Moulavi, Jörg Sander. “Density-based clustering based hierarchical density estimates.” Pacific-Asia conference knowledge discovery data mining. Springer, Berlin, Heidelberg, 2013.","code":""},{"path":"https://zhiyhu.github.io/CIDER/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhiyuan Hu. Author, maintainer. Christopher Yau. Author. Ahmed Ahmed. Author.","code":""},{"path":"https://zhiyhu.github.io/CIDER/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hu Z, Yau C, Ahmed (2024). CIDER: Meta-Clustering Single-Cell Data Integration Evaluation. https://github.com/zhiyhu/CIDER, https://zhiyhu.github.io/CIDER/.","code":"@Manual{,   title = {CIDER: Meta-Clustering for Single-Cell Data Integration and Evaluation},   author = {Zhiyuan Hu and Christopher Yau and Ahmed Ahmed},   year = {2024},   note = {https://github.com/zhiyhu/CIDER, https://zhiyhu.github.io/CIDER/}, }"},{"path":"https://zhiyhu.github.io/CIDER/index.html","id":"cider-meta-clustering-for-single-cell-data-integration-and-evaluation","dir":"","previous_headings":"","what":"Meta-Clustering for Single-Cell Data Integration and Evaluation","title":"Meta-Clustering for Single-Cell Data Integration and Evaluation","text":"Clustering Single-cell RNA-Seq (scRNA-Seq) data multiple samples conditions often challenged confounding factors, batch effects biologically relevant variability. Existing batch effect removal methods typically require strong assumptions composition cell populations near identical across samples. present CIDER, meta-clustering workflow based inter-group similarity measures. prototype method firstly applied Hu et al., Cancer Cell 2020. informtion please see publication Genome Biology (2021). CIDER can: address clustering task confounded scRNA-Seq data, assess biological correctness integration test metric, require existence prior cellular annotations, compute similarity among biological populations.","code":""},{"path":"https://zhiyhu.github.io/CIDER/index.html","id":"installation-archived-versions","dir":"","previous_headings":"","what":"Installation (archived versions)","title":"Meta-Clustering for Single-Cell Data Integration and Evaluation","text":"Archived versions CIDER available cran Archive. First can download package local folder install file working compatibility bring package back cran.","code":"## replace the \"path_to_pkg\" with the real path install.packages(\"path_to_pkg/CIDER_0.99.1.tar.gz\", repos = NULL, type = \"source\")"},{"path":"https://zhiyhu.github.io/CIDER/index.html","id":"compatibility","dir":"","previous_headings":"","what":"Compatibility","title":"Meta-Clustering for Single-Cell Data Integration and Evaluation","text":"Seurat: currently package supports old version Seurat objects, Seurat v5. working resolve issue.","code":""},{"path":"https://zhiyhu.github.io/CIDER/index.html","id":"cider-as-an-evaluation-metric---quick-start","dir":"","previous_headings":"","what":"CIDER as an evaluation metric - Quick start","title":"Meta-Clustering for Single-Cell Data Integration and Evaluation","text":"scRNA-Seq data corrected integration algorithm (e.g. Seurat-CCA, Harmony, Scanrama…). can use CIDER evaluate biological populations correctly aligned. running CIDER evaluation functions, make sure Seurat object (e.g. seu.integrated) corrected PCs seu.integrated@reductions$pca@cell.embeddings. Seurat-CCA automatically put corrected PCs . methods used, corrected PCs can added using seu.integrated@reductions$pca@cell.embeddings <- corrected.PCs. evaluation scores (IDER-based similarity empirical p values) can visualised scatterPlot function. detailed tutorial evaluation available.","code":"library(CIDER) seu.integrated <- hdbscan.seurat(seu.integrated) ider <- getIDEr(seu.integrated, verbose = FALSE) seu.integrated <- estimateProb(seu.integrated, ider) p1 <- scatterPlot(seu.integrated, \"tsne\", colour.by = \"similarity\") p2 <- scatterPlot(seu.integrated, \"tsne\", colour.by = \"pvalue\")  plot_grid(p1,p2, ncol = 3)"},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/index.html","id":"quick-start---ascider","dir":"","previous_headings":"Use CIDER for clustering tasks","what":"Quick start - asCIDER","title":"Meta-Clustering for Single-Cell Data Integration and Evaluation","text":"seu Seurat object initial clustering annotation stored initial_cluster metadata batch information Batch. asCIDER example contains two steps: computing IDER-based similarity matrix (getIDER) performing final clustering (finalClustering). detailed tutorial asCIDER . data prior batch-specific clusters, dnCDIER tutorials (high-level detailed walk-) can referred .","code":"ider <- getIDEr(seu,                  group.by.var = \"initial_cluster\",                 batch.by.var = \"Batch\") seu <- finalClustering(seu, ider, cutree.h = 0.45)"},{"path":"https://zhiyhu.github.io/CIDER/index.html","id":"quick-start---compute-the-similarity-matrix-within-one-batch","dir":"","previous_headings":"","what":"Quick start - compute the similarity matrix within one batch","title":"Meta-Clustering for Single-Cell Data Integration and Evaluation","text":"code used compute similarity matrix within one batch. dedicated function construction.","code":"library(CIDER) # make sure have a colume called \"Batch\" in the data and assign a uniform value # to all cells, for example: seu$Batch <- \"onebatch\"  # run the getDistMat, the input needs to be list(seu), the tmp.initial.clusters  # is the group information that you want to compute the similarity matrix with. # The output is the similarity matrix. dist <- getDistMat(seu_list = list(seu), tmp.initial.clusters = \"cell_type\")"},{"path":"https://zhiyhu.github.io/CIDER/index.html","id":"bug-reports-and-issues","dir":"","previous_headings":"","what":"Bug reports and issues","title":"Meta-Clustering for Single-Cell Data Integration and Evaluation","text":"Please use Issues report bugs seek help. Thank !","code":""},{"path":"https://zhiyhu.github.io/CIDER/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Meta-Clustering for Single-Cell Data Integration and Evaluation","text":"Z. Hu, . . Ahmed, C. Yau. CIDER: interpretable meta-clustering framework single-cell RNA-seq data integration evaluation. Genome Biology 22, Article number: 337 (2021); doi: https://doi.org/10.1186/s13059-021-02561-2","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/Merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather initial cluster names — gatherInitialClusters","title":"Gather initial cluster names — gatherInitialClusters","text":"Gather initial cluster names","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/Merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather initial cluster names — gatherInitialClusters","text":"","code":"gatherInitialClusters(seu_list, seu)"},{"path":"https://zhiyhu.github.io/CIDER/reference/Merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather initial cluster names — gatherInitialClusters","text":"seu_list list containing Seurat objects. Required. seu Seurat object","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/Merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather initial cluster names — gatherInitialClusters","text":"Seurat object containing initial clustering  results `seu$initial_cluster`.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/Merge.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Gather initial cluster names — gatherInitialClusters","text":"gatherInitialClusters: initial clustering results Seurat object list one Seurat object. Follows function `mergeInitialClusters`.","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/calculateDistMatOneModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance matrix with in one model — calculateDistMatOneModel","title":"Calculate distance matrix with in one model — calculateDistMatOneModel","text":"function called `getDistMat`.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/calculateDistMatOneModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance matrix with in one model — calculateDistMatOneModel","text":"","code":"calculateDistMatOneModel(   matrix,   metadata,   verbose = TRUE,   method = \"voom\",   additional.variate = NULL )"},{"path":"https://zhiyhu.github.io/CIDER/reference/calculateDistMatOneModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance matrix with in one model — calculateDistMatOneModel","text":"matrix count matrix. Rows genes/features columns samples/cells. metadata Data frame. rows correspond columns `matrix` input. verbose Print message progress bar (default: TRUE) method Methods DE analysis. Options: \"voom\" \"trend\" (default) additional.variate additional variate include linear model regress ","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/calculateDistMatOneModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance matrix with in one model — calculateDistMatOneModel","text":"similarity matrix","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/calculateDistMatOneModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate distance matrix with in one model — calculateDistMatOneModel","text":"Zhiyuan Hu","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/cosineSimilarityR.html","id":null,"dir":"Reference","previous_headings":"","what":"cosine similarity in R — cosineSimilarityR","title":"cosine similarity in R — cosineSimilarityR","text":"cosine similarity R","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/cosineSimilarityR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cosine similarity in R — cosineSimilarityR","text":"","code":"cosineSimilarityR(x)"},{"path":"https://zhiyhu.github.io/CIDER/reference/cosineSimilarityR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cosine similarity in R — cosineSimilarityR","text":"x matrix","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/cosineSimilarityR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cosine similarity in R — cosineSimilarityR","text":"similarity matrix among rows input matrix","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/downsampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsampling cells — downsampling","title":"Downsampling cells — downsampling","text":"Downsampling cells group IDER-based similarity calculation.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/downsampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsampling cells — downsampling","text":"","code":"downsampling(   metadata,   n.size = 35,   seed = 12345,   include = FALSE,   replace = FALSE,   lower.cutoff = 3 )"},{"path":"https://zhiyhu.github.io/CIDER/reference/downsampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsampling cells — downsampling","text":"metadata Data frame. includes least 2 columns, label batch. row corresponds one cell. Required. n.size Numeric. number cells used group. (Default: 35) seed Numeric. Seed used sample. (Default: 12345) include Boolean. Using `include = TRUE` include group smaller required size. (Default: FALSE) replace Boolean. Using `replace = TRUE` group smaller required size cells repeatedly used. (Default: FALSE) lower.cutoff Numeric. minimum size groups keep. (Default: 3)","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/downsampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsampling cells — downsampling","text":"numeric list cells kept downstream computation.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/estimateProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the empirical probability of whether two set of cells\nfrom distinct batches belong to the same population — estimateProb","title":"Estimate the empirical probability of whether two set of cells\nfrom distinct batches belong to the same population — estimateProb","text":"Estimate empirical probability whether two set cells distinct batches belong population","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/estimateProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the empirical probability of whether two set of cells\nfrom distinct batches belong to the same population — estimateProb","text":"","code":"estimateProb(seu, ider, n_size = 40, n.perm = 5, verbose = FALSE)"},{"path":"https://zhiyhu.github.io/CIDER/reference/estimateProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the empirical probability of whether two set of cells\nfrom distinct batches belong to the same population — estimateProb","text":"seu Seurat object ider output list function `getIDEr`. n_size Number cells per group used compute similarity. Default: 40 n.perm Numeric. Time permutations. verbose Boolean. Print progress . (Default: FALSEW)","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/estimateProb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the empirical probability of whether two set of cells\nfrom distinct batches belong to the same population — estimateProb","text":"Seurat object IDER-based similarity empirical probability rejection","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/finalClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Final clustering step for meta-clustering — finalClustering","title":"Final clustering step for meta-clustering — finalClustering","text":"Merge initial clusters final clusters based matrix IDEr.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/finalClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Final clustering step for meta-clustering — finalClustering","text":"","code":"finalClustering(   seu,   dist,   cutree.by = \"h\",   cutree.h = 0.45,   cutree.k = 3,   hc.method = \"complete\" )"},{"path":"https://zhiyhu.github.io/CIDER/reference/finalClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Final clustering step for meta-clustering — finalClustering","text":"seu Seurat S4 object step `getIDEr`. Required. dist list. Output `getIDEr`. Required. cutree.Character. Cut tree parameter, height (\"h\") number clusters (\"k\"). (Default: h) cutree.h Numeric 0 1. height used cut tree. Ignored `cutree.= 'k`. (Default: 0.45) cutree.k Numeric/integer. Used cut tree. Ignored `cutree.= 'h`. (Default: 3) hc.method Character. Used choose hierarchical clustering method.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/finalClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Final clustering step for meta-clustering — finalClustering","text":"Seurat S4 object final clustering results `CIDER_clusters` meta.data.","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/finalClustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Final clustering step for meta-clustering — finalClustering","text":"","code":"library(CIDER) data(\"pancreas\") ider <- getIDEr(pancreas, downsampling.size = 30) #> Generating distance matrix... #>    |                                                                               |                                                                      |   0%   |                                                                               |===                                                                   |   4%   |                                                                               |======                                                                |   8%   |                                                                               |========                                                              |  12%   |                                                                               |===========                                                           |  16%   |                                                                               |==============                                                        |  20%   |                                                                               |=================                                                     |  24%   |                                                                               |====================                                                  |  28%   |                                                                               |======================                                                |  32%   |                                                                               |=========================                                             |  36%   |                                                                               |============================                                          |  40%   |                                                                               |===============================                                       |  44%   |                                                                               |==================================                                    |  48%   |                                                                               |====================================                                  |  52%   |                                                                               |=======================================                               |  56%   |                                                                               |==========================================                            |  60%   |                                                                               |=============================================                         |  64%   |                                                                               |================================================                      |  68%   |                                                                               |==================================================                    |  72%   |                                                                               |=====================================================                 |  76%   |                                                                               |========================================================              |  80%   |                                                                               |===========================================================           |  84%   |                                                                               |==============================================================        |  88%   |                                                                               |================================================================      |  92%   |                                                                               |===================================================================   |  96%   |                                                                               |======================================================================| 100% seu <- finalClustering(pancreas, ider) head(seu$CIDER_cluster) #> mouse1_lib2.final_cell_0006 mouse1_lib2.final_cell_0276  #>                         \"1\"                         \"1\"  #> mouse2_lib2.final_cell_0183 mouse2_lib3.final_cell_0217  #>                         \"1\"                         \"1\"  #> mouse1_lib2.final_cell_0230 mouse2_lib3.final_cell_0053  #>                         \"1\"                         \"1\""},{"path":"https://zhiyhu.github.io/CIDER/reference/getDistMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Similarity Matrix — getDistMat","title":"Calculate the Similarity Matrix — getDistMat","text":"Compute IDER-based similarity matrix list Seurat objects. function regress batch effects designed used initial clustering step.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/getDistMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Similarity Matrix — getDistMat","text":"","code":"getDistMat(   seu_list,   verbose = TRUE,   tmp.initial.clusters = \"seurat_clusters\",   method = \"trend\",   additional.variate = NULL,   downsampling.size = 35,   downsampling.include = TRUE,   downsampling.replace = TRUE )"},{"path":"https://zhiyhu.github.io/CIDER/reference/getDistMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Similarity Matrix — getDistMat","text":"seu_list list containing Seurat objects. Required. verbose Print message progress bar (default: TRUE) tmp.initial.clusters One colnames `Seurat@meta.data`. Used group. Default: \"seurat_clusters\" method Methods DE analysis. Options: \"voom\" \"trend\" (default) additional.variate additional variate include linear model regress downsampling.size Number cells used per group. Default: 35 downsampling.include Whether include group size smaller `downsampling.size`. Default: TRUE downsampling.replace Whether use `replace` sampling group size smaller `downsampling.size` kept. Default: TRUE","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/getDistMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Similarity Matrix — getDistMat","text":"list similarity matrices","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/getDistMat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the Similarity Matrix — getDistMat","text":"Zhiyuan Hu","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/getGroupFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate IDER-based similarity between two groups — getGroupFit","title":"Calculate IDER-based similarity between two groups — getGroupFit","text":"Calculate IDER-based similarity two groups","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/getGroupFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate IDER-based similarity between two groups — getGroupFit","text":"","code":"getGroupFit(logCPM, design, contrast_m)"},{"path":"https://zhiyhu.github.io/CIDER/reference/getGroupFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate IDER-based similarity between two groups — getGroupFit","text":"logCPM logCPM design design contrast_m contrast matrix","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/getGroupFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate IDER-based similarity between two groups — getGroupFit","text":"Numeric. IDER-based similarity two groups.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/getIDEr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute IDER-based similarity — getIDEr","title":"Compute IDER-based similarity — getIDEr","text":"Calculate similarity matrix based metrics Inter-group Differential ExpRession (IDER) selected batch effects regressed .","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/getIDEr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute IDER-based similarity — getIDEr","text":"","code":"getIDEr(   seu,   group.by.var = \"initial_cluster\",   batch.by.var = \"Batch\",   verbose = TRUE,   use.parallel = FALSE,   n.cores = 1,   downsampling.size = 40,   downsampling.include = TRUE,   downsampling.replace = TRUE )"},{"path":"https://zhiyhu.github.io/CIDER/reference/getIDEr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute IDER-based similarity — getIDEr","text":"seu Seurat S4 object column `initial_cluster` meta.data. Required. group..var initial clusters (batch-specific groups) variable. Needs one `colnames(seu@meta.data)`. Default: \"initial_cluster\". batch..var Batch variable. Needs one `colnames(seu@meta.data)`. Default: \"Batch\". verbose Boolean. Print message progress bar. (Default: TRUE) use.parallel Boolean. Use parallel computation, requires doParallel; progress bar printed . Run time 1/n.cores  compared situation parallelisation used. (Default: FALSE) n.cores Numeric. Number cores used parallel computing (default: 1). downsampling.size Numeric. number cells representing group. (Default: 40) downsampling.include Boolean. Using `include = TRUE` include group smaller required size. (Default: FALSE) downsampling.replace Boolean. Using `replace = TRUE` group smaller required size cells repeatedly used. (Default: FALSE)","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/getIDEr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute IDER-based similarity — getIDEr","text":"list four objects: similarity matrix, numeric vector recording cells used data frame combinations included.","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/hdbscan.seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial clustering for evaluating integration — hdbscan.seurat","title":"Initial clustering for evaluating integration — hdbscan.seurat","text":"function applies HDBSCAN, density-based clustering method, corrected dimension reduction.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/hdbscan.seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial clustering for evaluating integration — hdbscan.seurat","text":"","code":"hdbscan.seurat(seu, reduction = \"pca\", dims = seq_len(15), minPts = 25)"},{"path":"https://zhiyhu.github.io/CIDER/reference/hdbscan.seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial clustering for evaluating integration — hdbscan.seurat","text":"seu Seurat object containing integrated batch corrected PCA. reduction Character. Name dimension reduction integration batch correction. (Default: PCA) dims Numeric vector. Dimensions used initial clustering. (Default: 1:15) minPts Interger. Minimum size clusters. passed `hdbscan` function. (Default: 25)","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/hdbscan.seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial clustering for evaluating integration — hdbscan.seurat","text":"Seurat object two additional columns meta.data: dbscan_cluster initial_cluster.","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/initialClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial clustering — initialClustering","title":"Initial clustering — initialClustering","text":"Perform batch-specific initial clustering.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/initialClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial clustering — initialClustering","text":"","code":"initialClustering(   seu,   batch.var = \"Batch\",   cut.height = 0.4,   nfeatures = 2000,   additional.vars.to.regress = NULL,   dims = seq_len(14),   resolution = 0.6,   downsampling.size = 50,   verbose = FALSE )"},{"path":"https://zhiyhu.github.io/CIDER/reference/initialClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial clustering — initialClustering","text":"seu Seurat S4 object. Required. batch.var Character. One column names `seu@meta.data`. used partition Seurat object smaller ones. Default: \"Batch\" cut.height Numeric. Height used cut hirerchical trees. Default: 0.4 nfeatures Number high variance genes used. Default: 2000 additional.vars..regress Additional variables regress . Needs among column names `seu@meta.data`. Default: `NULL` dims Number dimension used clustering. Passed Seurat. Default: `1:14` resolution Resolution clustering. Passed Seurat. Default: 0.6 downsampling.size Numeric. number cells representing group. (Default: 40) verbose Print progress bar . Default: FALSE","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/initialClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial clustering — initialClustering","text":"Seurat S4 object initial cluster information `initial_cluster` meta.data.","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/measureSimilarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure similarity between two vectors — measureSimilarity","title":"Measure similarity between two vectors — measureSimilarity","text":"Measure similarity two vectors","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/measureSimilarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure similarity between two vectors — measureSimilarity","text":"","code":"measureSimilarity(x1, x2, method = \"pearson\")"},{"path":"https://zhiyhu.github.io/CIDER/reference/measureSimilarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure similarity between two vectors — measureSimilarity","text":"x1 x1 x2 x2 method method","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/measureSimilarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure similarity between two vectors — measureSimilarity","text":"similarity matrix","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/mergeInitialClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Initial Clusters — mergeInitialClusters","title":"Merge Initial Clusters — mergeInitialClusters","text":"Merge Initial Clusters","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/mergeInitialClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Initial Clusters — mergeInitialClusters","text":"","code":"mergeInitialClusters(   seu_list,   dist_list,   use = \"coef\",   method = \"hc\",   hc.method = \"average\",   cutree.by = \"h\",   cutree.h = 0.6,   cutree.k = 3 )"},{"path":"https://zhiyhu.github.io/CIDER/reference/mergeInitialClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Initial Clusters — mergeInitialClusters","text":"seu_list list containing Seurat objects. Required. dist_list list containing similarity matrices. output `getDistMat ()` use Default: \"coef\". option available currently. method method = \"hc\" hc.method Passed `method` parameter `hclust()`. Default: \"average\" cutree.Cut trees height (\"h\", default) number clusters (\"k\") cutree.h Height used cut tree. Default: 0.6. cutree.k Number clusters used cut tree. Default: 3.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/mergeInitialClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Initial Clusters — mergeInitialClusters","text":"list Seurat objects containing updated initial clustering information `seu_list[[seu_itor]]$inicluster`. original initial cluster information stored `seu_list[[seu_itor]]$inicluster_tmp`.","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/pancreas.html","id":null,"dir":"Reference","previous_headings":"","what":"Pancreatic scRNA-Seq data. — pancreas","title":"Pancreatic scRNA-Seq data. — pancreas","text":"Toy data test functions. contains 12474 genes 222 cells. count matrix sample information downloaded NCBI GEO accession GSE84133.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/pancreas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pancreatic scRNA-Seq data. — pancreas","text":"","code":"pancreas"},{"path":"https://zhiyhu.github.io/CIDER/reference/pancreas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pancreatic scRNA-Seq data. — pancreas","text":"Seurat object.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/pancreas.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pancreatic scRNA-Seq data. — pancreas","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE84133","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/pancreas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pancreatic scRNA-Seq data. — pancreas","text":"","code":"data(\"pancreas\")"},{"path":"https://zhiyhu.github.io/CIDER/reference/plotDistMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Similarity Matrix with pheatmap — plotDistMat","title":"Plot Similarity Matrix with pheatmap — plotDistMat","text":"Plot Similarity Matrix pheatmap","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/plotDistMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Similarity Matrix with pheatmap — plotDistMat","text":"","code":"plotDistMat(dist.list, use = \"coef\")"},{"path":"https://zhiyhu.github.io/CIDER/reference/plotDistMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Similarity Matrix with pheatmap — plotDistMat","text":"dist.list Output function `getDistMat()`. Required. use Default: \"coef\". option currently can used.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/plotDistMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Similarity Matrix with pheatmap — plotDistMat","text":"pheatmap showing similarity matrix","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/plotHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Heatmap for the IDER-based similarity matrix — plotHeatmap","title":"Plot Heatmap for the IDER-based similarity matrix — plotHeatmap","text":"Plot Heatmap IDER-based similarity matrix","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/plotHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Heatmap for the IDER-based similarity matrix — plotHeatmap","text":"","code":"plotHeatmap(seu, ider)"},{"path":"https://zhiyhu.github.io/CIDER/reference/plotHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Heatmap for the IDER-based similarity matrix — plotHeatmap","text":"seu Seurat object. ider Output function `getIDEr`.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/plotHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Heatmap for the IDER-based similarity matrix — plotHeatmap","text":"heatmap shows similarity shared groups two batches","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/plotHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Heatmap for the IDER-based similarity matrix — plotHeatmap","text":"","code":"if (FALSE) {   plotHeatmap(seu, ider) }"},{"path":"https://zhiyhu.github.io/CIDER/reference/plotNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Network Graph — plotNetwork","title":"Plot Network Graph — plotNetwork","text":"Network visualisation IDER-based similarity matrix. vertexes initial clusters, edge width denotes similarity two initial clusters.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/plotNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Network Graph — plotNetwork","text":"","code":"plotNetwork(   seu,   ider,   colour.by = NULL,   weight.factor = 6.5,   col.vector = NULL,   vertex.size = 1 )"},{"path":"https://zhiyhu.github.io/CIDER/reference/plotNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Network Graph — plotNetwork","text":"seu Seurat S4 object step `getIDER`, containing `initial_cluster` `Batch` meta.data. Required. ider list. Output `getIDER`. Required. colour.Character. one colnames Seurat object meta.data.used colour vertex network graph. (Default: NULL) weight.factor Numerical. Adjust thickness edges. (Default: 6.5) col.vector vector Hex colour codes. value given (default), vector 74 colours used. vertex.size Numerical. Adjsut size vertexes. (Default: 1)","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/plotNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Network Graph — plotNetwork","text":"igraph object","code":""},{"path":[]},{"path":"https://zhiyhu.github.io/CIDER/reference/scatterPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot by a selected feature — scatterPlot","title":"Scatterplot by a selected feature — scatterPlot","text":"Scatterplot Seurat object based dimension reduction.","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/scatterPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot by a selected feature — scatterPlot","text":"","code":"scatterPlot(   seu,   reduction,   colour.by,   colvec = NULL,   title = NULL,   sort.by.numbers = TRUE,   viridis_option = \"B\" )"},{"path":"https://zhiyhu.github.io/CIDER/reference/scatterPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot by a selected feature — scatterPlot","text":"seu Seurat S4 object step `getIDER`. Required. reduction Character. dimension reduction used plot. Common options: \"pca\", \"tsne\", \"umap\". availability dimension reduction can checked `Reductions(seu)`. colour.Character. One column names `seu@meta.data`. Can either discreet continuous variables. colvec vector Hex colour codes. value given (default), vector 74 colours used. title Character. Title figure. sort..numbers Boolean. Whether sort groups number cells.(Default: True) viridis_option viridis_option. (Default: B)","code":""},{"path":"https://zhiyhu.github.io/CIDER/reference/scatterPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatterplot by a selected feature — scatterPlot","text":"scatter plot","code":""},{"path":"https://zhiyhu.github.io/CIDER/news/index.html","id":"cider-0990","dir":"Changelog","previous_headings":"","what":"CIDER 0.99.0","title":"CIDER 0.99.0","text":"CRAN release: 2021-11-19 Added NEWS.md file track changes package.","code":""}]
